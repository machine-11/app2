from crewai_tools import ScrapeWebsiteTool, FileWriterTool, TXTSearchTool, FileReadTool
from crewai import Agent, Task, Crew, Process
import json
import os
import random
from langchain_openai import ChatOpenAI
from logics.prepare_elig import load_query_tool
from langchain_core.callbacks import BaseCallbackHandler
from typing import Any, Dict



class CustomHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str) -> None:
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the start of a chain with user input."""
        # st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        # st.chat_message("assistant").write(outputs['input'])
        
    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> None:
        """""Log the action taken by an agent during a chain run."""
        # st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        # st.chat_message("assistant").write(inputs['input'])
        
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the end of a chain with the output generated by an agent."""
        # st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        # st.chat_message(self.agent_name).write(outputs['output'])




def gen_crew():


    #tool from elig index
    tool = load_query_tool()

    #agents
    agent_planner= Agent(
        role="HDB Consultant",
        goal="Plan engaging and factually accurate content grounded in the knowledge base about: '{topic}'",
        backstory="You're handling a query related to '{topic}'. Drawing on your vast experience and knowledge base, you ensure that customer inquiries are fully understood. You may refine the user’s query to address additional potential questions. Your efforts lay the groundwork for data analysts and business writers to deliver valuable insights, ultimately assisting customers in making informed decisions.",
        allow_delegation=False,
        verbose=True,
        llm = ChatOpenAI ( model="gpt-4o-mini", temperature= 0.3 ) 
    )


    agent_writer = Agent(
        role="HDB Writer",
        goal="Write insightful and factually accurate insights about the topic: '{topic}'",
        backstory="You are crafting a comprehensive response to the user query: '{topic}'. Your approach is guided by the outline and relevant context provided by the HDB Consultant, along with analysis from the Data Analyst related to '{topic}'. You will follow the main objectives and direction set forth by the HDB Consultant, delivering objective and impartial insights. These insights will be backed by information from the HDB Consultant.Ensure that your document is professionally designed for presentation and is easily understandable for citizens.",
        allow_delegation=False,
        verbose=True,
        llm= ChatOpenAI ( model="gpt-4o-mini", temperature= 0.6 ) 
    )


    agent_analyst = Agent(
        role="HDB Analyst",
        goal="Perform Comprehensive Analysis on the topic: '{topic}' ",
        backstory="You are leveraging your strong analytical skills to deliver a comprehensive  analysis on the topic: '{topic}'. Your work is guided by the outline and relevant context provided by the HDB Consultant.You will adhere to the main objectives and direction outlined by the HDB Consultant while producing detailed insights based on . These analyses will be shared with the Business Writer and will be supported by the information provided by the HDB Consultant",

        allow_delegation=False,
        verbose=True,
        llm = ChatOpenAI ( model="gpt-4o-mini", temperature= 0.2 ) 
    )

    #tasks
    task_plan = Task(
        description=(
        """1. Prioritize the most urgent questions related to '{topic}', including context for the customer’s inquiry.
        2. Leverage your insights on relevant HDB policies to anticipate additional questions users may have about eligibility for better types of flats or housing loans with more favorable rates.
        3. Suggest other relevant topics after addressing the initial questions.
        4. Limit the plan to a maximum of five key items."""
        ),
        expected_output="A comprehensive plan to address user queries regarding eligibility for flat and housing loan options, taking into account factors such as age, citizenship, family composition, income level, and ownership history.",
        agent= agent_planner,
        tools = [tool]

    )





    task_analyse = Task(
        description=(
          """1. Utilize the HDB Consultant's plan to conduct the necessary analysis on '{topic}'. 
             2. Pay close attention to details that may affect eligibility, including age, sex, marital status, income, race, and ethnicity.
             3. To provide users alternative and detail explanations for your analysis, and always include alternatives and addtional options even with strings attached.
             4. Your findings will be presented in a document designed by the HDB Writer.
             5. Collaborate with your team of consultants and writers to ensure the analysis aligns with the best insights on '{topic}'.
"""
    ),
        expected_output="""A clear and comprehensive analysis that delivers valuable data and insights regarding eligibility for flats and housing loans to the Business Writer.""",

        agent=agent_analyst,
        context= [task_plan],
        tools = [tool]
    )

    task_write = Task(
        description=(
            """
                1. Utilize the HDB consultant's plan and the analyst's insights to create a compelling document on '{topic}'. 
                2. Ensure that sections and subtitles are engagingly titled. Infuse the content with empathy and positivity to inspire hope and encourage readers. 
                3. Proofread for grammatical errors and ensure alignment with HDB's Vision, Mission, and Values. 
                4. Limit the document to a maximum of 1,000 words, in markdown format. Do not include any images."""
                                ),
        expected_output="A well-written Document providing insights for '{topic}'",
        agent=agent_writer,
        context= [task_plan, task_analyse],
        tools = [tool]
    )


    crew = Crew(
        agents=[agent_planner, agent_analyst, agent_writer],
        tasks=[task_plan, task_analyse, task_write ], 
        verbose= True,
		# process=Process.hierarchical, # In case you want to use that instead https://docs.crewai.com/how-to/Hierarchical/
        # manager_llm= ChatOpenAI( temperature=0) ,
        # manager_callbacks=[CustomHandler("Crew Manager")]
    )
    
    return crew

def run_crew(crew):


    crew.kickoff()

    task_output =   crew.tasks[0].output
    print(f"Task Description: {task_output.description}")
    print(f"Task Summary: {task_output.summary}")
    print(f"Raw Output: {task_output.raw}")

    if task_output.json_dict:
        print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
    if task_output.pydantic:
        print(f"Pydantic Output: {task_output.pydantic}")

    # try:
    #     o = json.loads(task_output.raw ) 
    # except:
    #     o = run_crew(crew)
    # return o


  

if __name__ == "__main__":
    # print(random_file() )
    # gen_quiz()
    print( gen_crew().kickoff({"topic": "I am 38 years old single singaporean. What flat and houseing loan I am eligible for? "}) )

# i am 38 years old, single, singaporean. I plan to get a hdb flat, what is the maximum amount of subsidry and grant I can possibly get from goverment?

###


